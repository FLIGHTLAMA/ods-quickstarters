buildscript {
    ext {
        nexus_url = "${project.findProperty('nexus_url') ?: System.getenv('NEXUS_HOST')}"
        nexus_user = "${project.findProperty('nexus_user') ?: System.getenv('NEXUS_USERNAME')}"
        nexus_pw = "${project.findProperty('nexus_pw') ?: System.getenv('NEXUS_PASSWORD')}"
        no_nexus = (project.findProperty('no_nexus') ?: System.getenv('NO_NEXUS') ?: false).toBoolean()
        if (!no_nexus && (nexus_url == "null" || nexus_user == "null" || nexus_pw == "null")) {
            throw new GradleException("property no_nexus='false' (or not defined) but at least one of the properties nexus_url, nexus_user or nexus_pw is not configured. Please configure those properties!")
        }

        def folderRel = (String)("${project.findProperty('nexus_folder_releases') ?: System.getenv('NEXUS_FOLDER_RELEASES')}")
        nexusFolderReleases = folderRel == "null" ? "maven-releases" : folderRel

        def folderSnaps = (String)("${project.findProperty('nexus_folder_snapshots') ?: System.getenv('NEXUS_FOLDER_SNAPSHOTS')}")
        nexusFolderSnapshots = folderSnaps == "null" ? "maven-snapshots" : folderSnaps

        snippetsDir = file('build/generated-snippets')
    }
}

apply plugin: 'groovy'

repositories {
    if (no_nexus) {
        println("using repositories 'jcenter' and 'mavenCentral', because property no_nexus=$no_nexus")
        jcenter()
        mavenCentral()
    } else {
        println("using nexus repositories")
        maven() {
            url "${nexus_url}/repository/jcenter/"
            credentials {
                username = "${nexus_user}"
                password = "${nexus_pw}"
            }
        }

        maven() {
            url "${nexus_url}/repository/maven-public/"
            credentials {
                username = "${nexus_user}"
                password = "${nexus_pw}"
            }
        }

        maven() {
            url "${nexus_url}/repository/atlassian_public/"
            credentials {
                username = "${nexus_user}"
                password = "${nexus_pw}"
            }
        }
    }
}

ext {
    junitVersion = "5.5.2"
    spockVersion = "1.3-groovy-2.5"
    gebVersion = "3.2"
    seleniumVersion = "3.141.59"
    htmlunitVersion = "2.36.0"
    unirestVersion = "3.2.00"
}

dependencies {
    testCompile "org.junit.jupiter:junit-jupiter-engine:${junitVersion}"
    testCompile "org.spockframework:spock-core:${spockVersion}"
    testCompile "com.konghq:unirest-java:${unirestVersion}"
    testCompile "org.gebish:geb-spock:${gebVersion}"
    testCompile "org.seleniumhq.selenium:selenium-firefox-driver:${seleniumVersion}"
    testCompile "org.seleniumhq.selenium:htmlunit-driver:${htmlunitVersion}"
    testRuntime "org.seleniumhq.selenium:selenium-support:${seleniumVersion}"
}

sourceSets {
    integration {
        groovy {
            srcDir 'src/test/integration/groovy'
        }
        resources {
            srcDir 'src/test/resources'
        }
        compileClasspath += sourceSets.main.output + sourceSets.test.output + configurations.testRuntime
        runtimeClasspath += sourceSets.main.output + sourceSets.test.output + configurations.testRuntime
    }

    acceptance {
        groovy {
            srcDir 'src/test/acceptance/groovy'
        }
        resources {
            srcDir 'src/test/resources'
        }
        compileClasspath += sourceSets.main.output + sourceSets.test.output + configurations.testRuntime
        runtimeClasspath += sourceSets.main.output + sourceSets.test.output + configurations.testRuntime
    }
}

configurations {
    integrationCompile.extendsFrom testCompile
    integrationRuntime.extendsFrom testRuntime
    
    acceptanceCompile.extendsFrom testCompile
    acceptanceRuntime.extendsFrom testRuntime
}

task integration(type: Test) {
    description = 'Runs integration tests.'
    group = 'verification'

    ignoreFailures = Boolean.getBoolean("test.ignoreFailures")
    testClassesDirs = sourceSets.integration.output.classesDirs
    classpath = sourceSets.integration.runtimeClasspath
}

task acceptance(type: Test) {
    description = 'Runs acceptance tests.'
    group = 'verification'

    ignoreFailures = Boolean.getBoolean("test.ignoreFailures")
    testClassesDirs = sourceSets.acceptance.output.classesDirs
    classpath = sourceSets.acceptance.runtimeClasspath
    
    // To launch integration before acceptance
    dependsOn integration
}

// Test phase (gradle test) depends on acceptance
test {
  dependsOn acceptance  
}

